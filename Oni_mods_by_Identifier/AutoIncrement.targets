<?xml version="1.0" encoding="utf-8"?>
<Project>

	<!--TODO: Figure out why "RoslynCodeTaskFactory" can't find the reference (sometimes)...and then use new c# features to make this cleaner.-->
	<UsingTask
	  TaskName="AutoIncrement"
	  TaskFactory="CodeTaskFactory"
	  AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >

		<ParameterGroup>
			<Path ParameterType="System.String" Required="true" />
			<Revision ParameterType="System.UInt16" Output="true" />
		</ParameterGroup>

		<Task>
                        <Code Type="Class" Language="cs">
                                <![CDATA[
using Microsoft.Build.Utilities;
using System.IO;
using System.Text.RegularExpressions;

public class AutoIncrement : Task
{
    public string Path { get; set; }
    public ushort Revision { get; set; }

    public override bool Execute()
    {
        var version = LoadVersion();

        if (version.IsCurrentDate())
            version.revision += 1;
        else
            version = new Version();

        WriteVersion(version);
        Revision = version.revision;
        return true;
    }

    private Version LoadVersion()
    {
        var versionPath = System.IO.Path.Combine(Path ?? string.Empty, "version.json");

        if (!File.Exists(versionPath))
            return new Version();

        try
        {
            var content = File.ReadAllText(versionPath);

            if (string.IsNullOrWhiteSpace(content))
                return new Version();

            var version = new Version();

            int major;
            if (TryExtractInt(content, "major", out major))
                version.major = major;

            int minor;
            if (TryExtractInt(content, "minor", out minor))
                version.minor = minor;

            int build;
            if (TryExtractInt(content, "build", out build))
                version.build = build;

            ushort revision;
            if (TryExtractUShort(content, "revision", out revision))
                version.revision = revision;

            return version;
        }
        catch (IOException)
        {
            return new Version();
        }
        catch (System.UnauthorizedAccessException)
        {
            return new Version();
        }
    }

    private void WriteVersion(Version version)
    {
        var versionPath = System.IO.Path.Combine(Path ?? string.Empty, "version.json");
        var payload = string.Concat(
            "{\"major\":",
            version.major.ToString(System.Globalization.CultureInfo.InvariantCulture),
            ",\"minor\":",
            version.minor.ToString(System.Globalization.CultureInfo.InvariantCulture),
            ",\"build\":",
            version.build.ToString(System.Globalization.CultureInfo.InvariantCulture),
            ",\"revision\":",
            version.revision.ToString(System.Globalization.CultureInfo.InvariantCulture),
            "}");

        File.WriteAllText(versionPath, payload);
    }

    private bool TryExtractInt(string content, string propertyName, out int value)
    {
        var match = Regex.Match(content, "\\\"" + propertyName + "\\\"\\s*:\\s*(-?\\d+)");

        if (match.Success && int.TryParse(match.Groups[1].Value, out value))
            return true;

        value = default(int);
        return false;
    }

    private bool TryExtractUShort(string content, string propertyName, out ushort value)
    {
        var match = Regex.Match(content, "\\\"" + propertyName + "\\\"\\s*:\\s*(\\d+)");

        if (match.Success && ushort.TryParse(match.Groups[1].Value, out value))
            return true;

        value = default(ushort);
        return false;
    }

    private class Version
    {
        public int major = System.DateTime.Now.Year;
        public int minor = System.DateTime.Now.Month;
        public int build = System.DateTime.Now.Day;
        public ushort revision;

        public bool IsCurrentDate()
        {
            return major == System.DateTime.Now.Year && minor == System.DateTime.Now.Month && build == System.DateTime.Now.Day;
        }
    }
}
]]>
			</Code>
		</Task>
	</UsingTask>

</Project>
